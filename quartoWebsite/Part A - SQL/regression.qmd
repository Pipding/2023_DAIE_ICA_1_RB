---
title: "Linear Regression"
---

# Projects overview

@tbl-projectsoverview shows an overview of all projects

```{r}
#| label: tbl-projectsoverview
#| tbl-cap: Overview of all projects
#| echo: true
#| code-fold: true
#| warning: false
#| cache: true
library("RSQLite")
library("dplyr")

## connect to db
con <- dbConnect(drv=RSQLite::SQLite(), dbname="ICA_2023.sqlite")

projectsOverview <- dbGetQuery(
  con,
  'SELECT
      ProjectName,
      Name AS ProjectLead,
      Budget,
      JULIANDAY(StartDate) < JULIANDAY(DATE(\'now\')) AS Started,
      JULIANDAY(EndDate) < JULIANDAY(DATE(\'now\')) AS Completed,
      Count(DISTINCT A.AssetID) AS AssetCount,
      Count(DISTINCT AD.DeveloperID) AS AssetDevCount,
      CASE
          WHEN
              JULIANDAY(ExpectedCompletionDate) < JULIANDAY(DATE(ActualCompletionDate))
              OR
              JULIANDAY(ExpectedCompletionDate) < JULIANDAY(DATE(\'now\')) AND ActualCompletionDate IS NULL
          THEN
              TRUE
          ELSE
              FALSE
          END AS MissedMilestone
  FROM Projects
      LEFT JOIN Assets A on Projects.ProjectID = A.ProjectID
      LEFT JOIN AssetsDevelopers AD on A.AssetID = AD.AssetID
      JOIN ProjectDevelopers PD on Projects.ProjectID = PD.ProjectID
      JOIN Developers D on D.DeveloperID = PD.DeveloperID
      LEFT JOIN Timelines T on Projects.ProjectID = T.ProjectID
  GROUP BY Projects.ProjectID;'
)

completedProjects <- projectsOverview %>%
  filter(Completed == TRUE)

dbDisconnect(con)

# Converting integer columns to bools
projectsOverview <- projectsOverview %>%
  mutate(Started = ifelse(Started == 1, TRUE, FALSE)) %>%
  mutate(Completed = ifelse(Completed == 1, TRUE, FALSE)) %>%
  mutate(MissedMilestone = ifelse(MissedMilestone == 1, TRUE, FALSE))

# Show up to 7 rows. If data has more than 7 entries, show the first 8 with pagination
if(nrow(projectsOverview) <= 7) {
  knitr::kable(head(projectsOverview, 7), align='lcc')
} else {
  DT::datatable(projectsOverview, options = list(pageLength = 8, columnDefs = list(list( className = 'dt-center', targets = 2:3))))
}

completedProjects <- projectsOverview %>%
  filter(Completed == TRUE)
```

<br>

# Linear regression

Only completed projects are taken into account when performing linear regression as
data about incomplete projects are subject to change.

## Budget, team size and asset count

The total budget of completed projects appears to have no correlation to the number of assets in the project, with a
correlation coefficient of `r cor.test(completedProjects$Budget, completedProjects$AssetCount)$estimate`.
<br>
Predictably, team size has a moderate-to-strong positive correlation (correlation coefficient `r sprintf("%4.3f", cor.test(completedProjects$Budget, completedProjects$AssetDevCount)$estimate)`) with budget.

@fig-budgetsvsteamsize plots the budgets of completed projects against the size of their dev team. Overlayed, a linear regression shows the relationship between team size and budget

```{r Plot budget of completed projects against dev team size}
#| label: fig-budgetsvsteamsize
#| fig-cap: Linear regression of dev team size vs. budget for completed projects
#| echo: true
#| code-fold: true

library(ggplot2)
library(scales)

# Currency function for the Y axis: https://www.rdocumentation.org/packages/scales/versions/0.3.0/topics/dollar_format
# Adding the regression: https://community.rstudio.com/t/insert-regression-model-into-ggplot2/2439
ggplot(completedProjects, aes(AssetDevCount, Budget)) + 
  geom_point() +
  xlab("Dev team size") +
  ylab("Budget") +
  scale_y_continuous(labels = dollar_format(prefix = "â‚¬", scale = 0.001, suffix = "k")) + 
  scale_x_continuous(breaks = seq(min(completedProjects$AssetDevCount), max(completedProjects$AssetDevCount), by = 1)) + 
  geom_smooth(formula = y ~ x, method = "lm")
```

The relationship between the number of developers and the number of assets in a given project is weakly positively correlated, with a correlation coefficient of `r sprintf("%4.3f", cor.test(completedProjects$AssetDevCount, completedProjects$AssetCount)$estimate)`. This suggests it's common for a developer to work on more than one asset per project. This may be an explanatory factor for the lack of a direct correlation between the asset count of a project and its budget.

```{r Plot number of assets in a project against number of asset developers}
#| echo: true
#| code-fold: true
plot(completedProjects$AssetDevCount, completedProjects$AssetCount)
```

We can measure how the above factors influence the likelihood of project success by analysing them in relationship to a 'success' metric - namely, the number of milestones a project has missed. Taking into account projects which have not yet been completed, `r nrow(subset(projectsOverview, MissedMilestone==TRUE))`/`r length(projectsOverview)` projects missed a milestone.

```{r}
#| echo: true
#| code-fold: true

#projectsOverview=as.factor(projectsOverview$MissedMilestone)
#lm(as.factor(MissedMilestone)~Budget, data = projectsOverview)

# Performing logistic regression
# glm stands for "generalised linear models". The 'family' parameter tells it what type of linear modelling to do.
# 'binomial' tells glm to perform logistic regression
logisticRegression <- logisticRegression <- glm(MissedMilestone ~ Budget, data = projectsOverview, family = "binomial")

plot(logisticRegression)

# Summarize the logistic regression results
summary(logisticRegression)
```
