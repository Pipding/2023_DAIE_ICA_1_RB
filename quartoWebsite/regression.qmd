---
title: "Linear Regression"
---

# Projects overview

@tbl-projectsoverview shows an overview of all projects

```{r}
#| label: tbl-projectsoverview
#| tbl-cap: Overview of all projects
#| echo: true
#| code-fold: true
#| warning: false
#| cache: true
library("RSQLite")
library("dplyr")

## connect to db
con <- dbConnect(drv=RSQLite::SQLite(), dbname="ICA_2023.sqlite")

projectsOverview <- dbGetQuery(
  con,
  'SELECT
      ProjectName,
      Name AS ProjectLead,
      Budget,
      JULIANDAY(StartDate) < JULIANDAY(DATE(\'now\')) AS Started,
      JULIANDAY(EndDate) < JULIANDAY(DATE(\'now\')) AS Completed,
      Count(DISTINCT A.AssetID) AS AssetCount,
      Count(DISTINCT AD.DeveloperID) AS AssetDevCount,
      CASE
          WHEN
              JULIANDAY(ExpectedCompletionDate) < JULIANDAY(DATE(ActualCompletionDate))
              OR
              JULIANDAY(ExpectedCompletionDate) < JULIANDAY(DATE(\'now\')) AND ActualCompletionDate IS NULL
          THEN
              TRUE
          ELSE
              FALSE
          END AS MissedMilestone
  FROM Projects
      LEFT JOIN Assets A on Projects.ProjectID = A.ProjectID
      LEFT JOIN AssetsDevelopers AD on A.AssetID = AD.AssetID
      JOIN ProjectDevelopers PD on Projects.ProjectID = PD.ProjectID
      JOIN Developers D on D.DeveloperID = PD.DeveloperID
      LEFT JOIN Timelines T on Projects.ProjectID = T.ProjectID
  GROUP BY Projects.ProjectID;'
)

dbDisconnect(con)

# Converting integer columns to bools
projectsOverview <- projectsOverview %>%
  mutate(Started = ifelse(Started == 1, TRUE, FALSE)) %>%
  mutate(Completed = ifelse(Completed == 1, TRUE, FALSE)) %>%
  mutate(MissedMilestone = ifelse(MissedMilestone == 1, TRUE, FALSE))

completedProjects <- projectsOverview %>%
  filter(Completed == TRUE)

# Show up to 7 rows. If data has more than 7 entries, show the first 8 with pagination
if(nrow(projectsOverview) <= 7) {
  knitr::kable(head(projectsOverview, 7), align='lcc')
} else {
  DT::datatable(projectsOverview, options = list(pageLength = 8, columnDefs = list(list( className = 'dt-center', targets = 2:3))))
}

completedProjects <- projectsOverview %>%
  filter(Completed == TRUE)

startedProjects <- projectsOverview %>%
  filter(Started == TRUE)
```

<br>

# Linear regression

Only completed projects are taken into account when performing linear regression as data about incomplete projects are subject to change.

## Budget, team size and asset count

The total budget of completed projects appears to have no correlation to the number of assets in the project, with a correlation coefficient of `r cor.test(completedProjects$Budget, completedProjects$AssetCount)$estimate`. <br> Predictably, team size has a moderate-to-strong positive correlation (correlation coefficient `r sprintf("%4.3f", cor.test(completedProjects$Budget, completedProjects$AssetDevCount)$estimate)`) with budget. @fig-budgetvsteamsize plots the budgets of completed projects against the size of their dev team. The overlaid linear regression shows the relationship between team size and budget.

```{r Plot budget of completed projects against dev team size}
#| label: fig-budgetvsteamsize
#| fig-cap: Linear regression of dev team size vs. budget for completed projects
#| echo: true
#| code-fold: true
#| warning: false
#| cache: true

library(ggplot2)
library(plotly)
library(scales)

# Currency function for the Y axis: https://www.rdocumentation.org/packages/scales/versions/0.3.0/topics/dollar_format
# Adding the regression: https://community.rstudio.com/t/insert-regression-model-into-ggplot2/2439
p <- ggplot(completedProjects, aes(AssetDevCount, Budget)) + 
      geom_point() +
      xlab("Dev team size") +
      ylab("Budget") +
      scale_y_continuous(labels = dollar_format(prefix = "â‚¬", scale = 0.001, suffix = "k")) + 
      scale_x_continuous(breaks = 
                           seq(
                             1,
                             max(completedProjects$AssetDevCount),
                             by = 1)
                         ) + 
      geom_smooth(formula = y ~ x, method = "lm")

ggplotly(p)
```

The relationship between the number of developers and the number of assets in a given project is weakly positively correlated, with a correlation coefficient of `r sprintf("%4.3f", cor.test(completedProjects$AssetDevCount, completedProjects$AssetCount)$estimate)`. If each developer worked on the same number of assets per project, we would expect these figures to be strongly correlated. The weak correlation therefore suggests that the workload, as measured by the number of assets worked on, is not evenly divided among developers. This may be an explanatory factor for the lack of a direct correlation between the asset count of a project and its budget. @fig-assetsvsteamsize shows the correlation between dev team size and asset count.

```{r Plot number of assets in a project against number of asset developers}
#| label: fig-assetsvsteamsize
#| fig-cap: Linear regression of dev team size vs. number of assets in a project
#| echo: true
#| code-fold: true
#| warning: false
#| cache: true

library(ggplot2)
library(scales)

p <- ggplot(completedProjects, aes(AssetDevCount, AssetCount)) + 
      geom_point() +
      xlab("Dev team size") +
      ylab("Asset count") +
      scale_y_continuous(breaks =
                           seq(
                             1,
                             max(completedProjects$AssetCount),
                             by = 1)
                         ) + 
      scale_x_continuous(breaks = 
                           seq(
                             1,
                             max(completedProjects$AssetDevCount),
                             by = 1)
                         ) + 
      geom_smooth(formula = y ~ x, method = "lm")

ggplotly(p)
```

Of the `r nrow(completedProjects)` completed projects, `r nrow(subset(completedProjects, MissedMilestone==TRUE))` missed a milestone. Taking our findings above into account, we can expand our scope to include projects which have been started but not yet finished.

`r nrow(startedProjects)` projects have been started, of which `r `nrow(completedProjects)` have been completed. `r nrow(subset(startedProjects, MissedMilestone==TRUE))`/`r nrow(startedProjects)` of these projects missed a milestone.

By plotting both budget and dev count, we can visualize which of these factors contributes more heavily to the likelihood of missing a milestone. @fig-missedmilestoneregression shows this plot.

```{r Determining the likelihood of a project missing a milestone given budget & team size}
#| label: fig-missedmilestoneregression
#| fig-cap: Plot representing the likelihood of missing a milestone based on team size and budget
#| echo: true
#| code-fold: true
#| warning: false
#| cache: true

p <- ggplot(
  startedProjects,
  aes(
    x=Budget,
    y=AssetDevCount,
    shape=MissedMilestone)
  ) +
  geom_point()

ggplotly(p)
```

This plot reveals the number of developers assigned to a project has an outsized impact on the likelihood of missing a milestone and suggests that a lower dev team size is a contributing factor to the likelihood of a project missing a milestone.

